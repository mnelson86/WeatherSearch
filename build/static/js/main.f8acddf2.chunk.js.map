{"version":3,"sources":["components/LocationSearch.tsx","components/LocationTable.tsx","services/WeatherService.ts","components/Alerts.tsx","components/WeatherEntry.tsx","components/WeatherSummary.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocationSearch","onSearch","useState","locationSearch","setLocationSearch","disableSearch","trim","className","type","value","placeholder","onChange","e","target","onClick","disabled","LocationTable","locations","onSelect","current","map","location","id","name","keyQuery","server","searchLocation","term","a","fetch","result","status","undefined","Error","json","readWeather","locationId","readForecast","forecast","list","alertComponent","message","ErrorAlert","WarningAlert","WeatherEntry","unixUtc","weather","dt","Date","toLocaleTimeString","Math","round","main","temp","temp_min","temp_max","humidity","condition","src","code","icon","alt","description","WeatherSummary","setWeather","setForecast","useEffect","Promise","all","style","whiteSpace","timePoint","App","setLocations","error","setError","warning","setWarning","currentLocation","setCurrentLocation","addLocation","find","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8acddf2.chunk.js","sourcesContent":["//dependency\r\nimport React, {FC, useState} from \"react\";\r\n\r\ninterface LocationSearchProps {\r\n  onSearch: (search: string) => void;\r\n}\r\n\r\n//default search and disable search values\r\nexport const LocationSearch: FC<LocationSearchProps> = ({onSearch}) => {\r\n  const [locationSearch, setLocationSearch] = useState('Hartford');\r\n  const disableSearch = locationSearch.trim() === '';\r\n\r\n  const addLocation = () => {\r\n    onSearch(locationSearch);\r\n    setLocationSearch('');\r\n  };\r\n\r\n  \r\n  //return search bar and button\r\n  return (\r\n    <div>\r\n      <label>\r\n        Add Location\r\n        <input className=\"ml-1 mr-1\" type=\"text\" value={locationSearch} placeholder =\"Enter city's name/zip\"\r\n               onChange={e => setLocationSearch(e.target.value)}/>\r\n      </label>\r\n      <button className=\"btn btn-primary\"\r\n              onClick={addLocation} disabled={disableSearch}>Search\r\n      </button>\r\n    </div>\r\n  );\r\n}","//dependencies\r\nimport React, {FC} from 'react';\r\nimport {WeatherLocation} from '../model/Weather';\r\nimport './LocationTable.css';\r\n\r\n//props given defualt values\r\ninterface LocationTableProps {\r\n  locations: WeatherLocation[];\r\n  current: WeatherLocation | null;\r\n  onSelect: (location: WeatherLocation) => void;\r\n}\r\n\r\nexport const LocationTable: FC<LocationTableProps> = ({locations, onSelect, current}) =>\r\n  <div>\r\n    <h2>Locations</h2>\r\n    <table className='table table-hover'>\r\n      <thead>\r\n      <tr>\r\n        <th>Click a city to view its weather</th>\r\n        \r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {locations.map(location =>\r\n        <tr key={location.id}\r\n            className={current?.id === location.id ? 'table-primary' : ''}\r\n            onClick={() => onSelect(location)}>\r\n          <td>{location.name}</td>\r\n        </tr>\r\n      )}\r\n      </tbody>\r\n    </table>\r\n  </div>;","//dependency\r\nimport {Weather, WeatherLocation} from '../model/Weather';\r\n\r\n\r\n// key to be removed before GitHub\r\nconst keyQuery = `appid=c06e26fb78379375d02dba5f18c0f524`\r\nconst server = 'https://api.openweathermap.org/data/2.5';\r\n\r\n//api calls and error messages in case of failure\r\n\r\n//fetch location \r\nexport async function searchLocation(term: string): Promise<WeatherLocation | undefined> {\r\n  const result = await fetch(`${server}/weather?q=${term}&${keyQuery}`);\r\n\r\n  if (result.status === 404) return undefined;\r\n  if (result.status !== 200) throw new Error('Failed to read location data');\r\n\r\n  return await result.json();\r\n}\r\n\r\n//fetch weather\r\nexport async function readWeather(locationId: number): Promise<Weather> {\r\n  const current = await fetch(`${server}/weather?id=${locationId}&${keyQuery}&units=metric`);\r\n\r\n  if (current.status !== 200) throw new Error('Failed to read location data');\r\n\r\n  return await current.json();\r\n}\r\n\r\n//fetch 8-day forecast\r\nexport async function readForecast(locationId: number): Promise<Weather[]> {\r\n  const forecast = await fetch(`${server}/forecast?id=${locationId}&${keyQuery}&units=metric&cnt=8`);\r\n\r\n  if (forecast.status !== 200) throw new Error('Failed to read location data');\r\n\r\n  return (await forecast.json()).list;\r\n}\r\n\r\n//fetch icons\r\nexport function getIconUrl(code: string): string {\r\n  return `https://openweathermap.org/img/wn/${code}.png`;\r\n}","// dependencies\r\nimport React, {FC} from \"react\";\r\n\r\ninterface AlertProps {\r\n    message: string\r\n}\r\n\r\nexport function alertComponent(className: string): FC<AlertProps> {\r\n    return ({message}) =>\r\n        message\r\n            ? <div className={`alert ${className}`}>{message}</div>\r\n            : null;\r\n}\r\n\r\nexport const ErrorAlert = alertComponent('alert-danger');\r\nexport const WarningAlert = alertComponent('alert-warning');","//dependencies\r\nimport React, {FC} from \"react\";\r\nimport {Weather} from \"../model/Weather\";\r\nimport {getIconUrl} from \"../services/WeatherService\";\r\n\r\ninterface WeatherEntryProps {\r\n\tweather: Weather;\r\n}\r\n\r\n//time conversion\r\nfunction convertUnixTimeToDate(unixUtc: number): Date {\r\n  return new Date(unixUtc * 1000);\r\n}\r\n\r\nexport const WeatherEntry: FC<WeatherEntryProps> = ({weather}) =>\r\n  <div>\r\n    <div>{convertUnixTimeToDate(weather.dt).toLocaleTimeString()}</div>\r\n    <div>\r\n      {/* display temps converted to farenheit */}\r\n      <strong>{Math.round((weather.main.temp * 1.8) + 32)}°F</strong>\r\n      <div>({Math.round((weather.main.temp_min * 1.8) + 32)}°F / \r\n            {Math.round((weather.main.temp_max * 1.8) + 32)}°F)</div>\r\n    </div>\r\n    <div>Humidity: {weather.main.humidity}%</div>\r\n    {/*display icon from open weather api*/}\r\n    {weather.weather.map(condition =>\r\n      <div key={condition.id}>\r\n        <img src={getIconUrl(condition.icon)} alt={condition.main}/> {condition.main} {condition.description}\r\n      </div>)\r\n    }\r\n  </div>;","//dependencies\r\nimport React, {FC, useEffect, useState} from \"react\";\r\nimport {WeatherEntry} from \"./WeatherEntry\";\r\nimport {Weather, WeatherLocation} from \"../model/Weather\";\r\nimport {readForecast, readWeather} from \"../services/WeatherService\";\r\nimport './WeatherSummary.css';\r\n\r\ninterface WeatherSummaryProps {\r\n  location: WeatherLocation | null;\r\n}\r\n\r\n//default props\r\nexport const WeatherSummary: FC<WeatherSummaryProps> = ({location}) => {\r\n  const [weather, setWeather] = useState<Weather | null>(null);\r\n  const [forecast, setForecast] = useState<Weather[] | null>(null);\r\n\r\n  //2 async calls for current and forecast\r\n  useEffect(() => {\r\n    (async function () {\r\n      if (location) {\r\n        const [weather, forecast] = await Promise.all([\r\n          readWeather(location.id),\r\n          readForecast(location.id)\r\n        ]);\r\n        setWeather(weather);\r\n        setForecast(forecast);\r\n      }\r\n    })()\r\n  }, [location]);\r\n\r\n  //null check does not display if there is no data to display\r\n  if (!location || !weather || !forecast) return null;\r\n\r\n  return (\r\n    <div id= \"resultsTable\">\r\n      <hr/>\r\n      <h2>Current: {location.name}</h2>\r\n      <WeatherEntry weather={weather}/>\r\n\r\n      <h2>Forecast</h2>\r\n      <div>\r\n        <ol style={({whiteSpace: 'nowrap'})}>\r\n          {forecast.map(timePoint =>\r\n            <li key={timePoint.dt}>\r\n              <WeatherEntry weather={timePoint}/>\r\n            </li>\r\n          )}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};","//dependencies\nimport React, {FC, useState} from 'react';\nimport './App.css';\nimport {LocationSearch} from \"./LocationSearch\";\nimport {LocationTable} from \"./LocationTable\";\nimport {WeatherLocation} from \"../model/Weather\";\nimport {searchLocation} from \"../services/WeatherService\";\nimport {ErrorAlert, WarningAlert} from \"./Alerts\";\nimport {WeatherSummary} from \"./WeatherSummary\";\n\n//set state and defaults\nconst App: FC = () => {\n  const [locations, setLocations] = useState<WeatherLocation[]>([]);\n  const [error, setError] = useState('');\n  const [warning, setWarning] = useState('');\n  const [currentLocation, setCurrentLocation] = useState<WeatherLocation | null>(null);\n\n  const resetAlerts = () => {\n    setError('');\n    setWarning('');\n  }\n\n//fill errors and warnings if unsuccessful call\n  let addLocation = async (term: string) => {\n    resetAlerts();\n    const location = await searchLocation(term);\n\n    if (!location) {\n      setError(`No location found called '${term}'`);\n    } else if (locations.find(item => item.id === location.id)) {\n      setWarning(`Location '${term}' is already in the list.`);\n    } else {\n      setLocations([location, ...locations]);\n    }\n  };\n\n  //return structure of separate components \n  return (\n    <body id= \"all\">\n    <div className=\"container\">\n      <h1>Weather Search</h1>\n\n      <LocationSearch onSearch={addLocation}/>\n      <h6>Default Search Hartford CT: Just press Search</h6>\n      <ErrorAlert message={error}/>\n      <WarningAlert message={warning}/>\n      <LocationTable locations={locations}\n                     current={currentLocation}\n                     onSelect={location => setCurrentLocation(location)}/>\n\n      <WeatherSummary location={currentLocation}/>\n    </div>\n    </body>\n  );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}